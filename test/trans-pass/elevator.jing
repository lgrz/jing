// This file is a part of Jing.
//
// Copyright (c) 2015 The Jing Authors.
//
// For the full copyright and license information, please view the LICENSE file
// that was distributed with this source code.

// EXPECTED OUTPUT
// proc(go_floor(N), [while(neg(op_unify(floor, N)), [if(below_floor(N), [up], [down])])]).
// proc(serve_a_floor, [pi(p_n, [?(next_floor_to_serve(p_n)), go_floor(p_n), open, close, off(p_n)])]).
// proc(control, [while(some(n, op_unify(light(n), on)), [serve_a_floor]), go_floor(1), open]).

prolog some: 2;
prolog op_unify: 2;

prolog below_floor: 1;
prolog above_floor: 1;
prolog next_floor_to_serve: 1;

action down: 0;
action up: 0;
action off: 1;
action open: 0;
action close: 0;

fun fluent floor: 0;
fun fluent light: 1;

procedure go_floor(N) {
    while (~op_unify(floor, N)) {
        if (below_floor(N)) {
            up;
        } else {
            down;
        }
    }
}

procedure serve_a_floor() {
    pick #n {
        ?(next_floor_to_serve(#n));
        go_floor(#n);
        open;
        close;
        off(#n);
    }
}

procedure control() {
    while (some(n, op_unify(light(n), on))) {
        serve_a_floor();
    }
    go_floor(1);
    open;
}
